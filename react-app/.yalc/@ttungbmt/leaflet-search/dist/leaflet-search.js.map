{"version":3,"file":"leaflet-search.js","sources":["../src/providers/JsonProvider.js","../src/providers/Map4DProvider.js","../src/providers/CocCocProvider.js","../src/providers/GoogleProvider.js","../src/providerMappings.js"],"sourcesContent":["import {JsonProvider as BaseJsonProvider} from 'leaflet-geosearch'\r\nimport {isString} from \"lodash-es\";\r\n\r\nclass JsonProvider extends BaseJsonProvider {\r\n    getUrl(url, params) {\r\n        let {cors = ''} = this.options\r\n        cors = isString(cors) ? cors : (cors ? 'https://cors-anywhere.herokuapp.com' : false)\r\n        return `${cors}${url}?${this.getParamString(params)}`;\r\n    }\r\n}\r\n\r\nexport default JsonProvider","import JsonProvider from \"./JsonProvider\";\n\nclass Map4DProvider extends JsonProvider {\n    endpoint({ query, type }) {\n        const params = {\n            ...this.options.params,\n            text: query\n        }\n\n        return this.getUrl('https://api.map4d.vn/map/autosuggest', params);\n    }\n\n\n    parse({ data }) {\n        if(data.code !== 'ok') return [];\n\n        return data.result.map((r) => ({\n            x: r.location.lng,\n            y: r.location.lat,\n            label: r.address,\n            bounds: null, // Map4D API does not provide bounds\n            raw: r\n        }));\n    }\n}\n\nexport default Map4DProvider\n","import JsonProvider from \"./JsonProvider\";\r\n\r\nclass CocCocProvider extends JsonProvider {\r\n    endpoint({query}) {\r\n        const url = 'https://map.coccoc.com/map/search.json',\r\n            params = {\r\n                suggestions: true,\r\n                pos_accuracy: 1504,\r\n                ...this.options.params,\r\n                query\r\n            }\r\n\r\n        return this.getUrl('https://map.coccoc.com/map/search.json', params);\r\n    }\r\n\r\n    parse({data}) {\r\n        if (!data.result) return [];\r\n\r\n        return data.result.poi.map((r) => ({\r\n            x: r.gps.longitude,\r\n            y: r.gps.latitude,\r\n            label: r.title,\r\n            bounds: null, // CocCoc API does not provide bounds\r\n            raw: r\r\n        }));\r\n    }\r\n}\r\n\r\nexport default CocCocProvider\r\n","import JsonProvider from './JsonProvider';\nexport default class GoogleProvider extends JsonProvider {\n    constructor() {\n        super(...arguments);\n        const {api = 'geocode', place_type = 'autocomplete'} = this.options || {}\n\n        if(api === 'place') {\n            this.options.place_type = place_type\n            this.searchUrl = `https://maps.googleapis.com/maps/api/${api}/${place_type}/json`;\n        } else {\n            this.searchUrl = `https://maps.googleapis.com/maps/api/${api}/json`;\n        }\n    }\n\n    endpoint({ query }) {\n        const params = typeof query === 'string' ? { [this.getQueryType()]: query } : query;\n        return this.getUrl(this.searchUrl, params);\n    }\n\n    getQueryType(){\n        const {api, place_type} = this.options\n        if(api === 'place'){\n            if(place_type === 'textsearch') return 'query'\n            else if(place_type === 'nearbysearch') return 'location'\n            else if(place_type === 'details') return 'place_id'\n            else if(place_type === 'photo') return 'photoreference'\n            else return 'input'\n        }\n\n        return 'address';\n    }\n\n    parse(result) {\n        const {api, place_type} = this.options\n        let resultType = (api === 'place' && place_type === 'autocomplete') ? 'predictions' : 'results'\n\n        return result.data[resultType].map((r) => ({\n            x: r.geometry.location.lng,\n            y: r.geometry.location.lat,\n            label: r.formatted_address,\n            bounds: [\n                [r.geometry.viewport.southwest.lat, r.geometry.viewport.southwest.lng],\n                [r.geometry.viewport.northeast.lat, r.geometry.viewport.northeast.lng],\n            ],\n            raw: r,\n        }));\n    }\n}\n//# sourceMappingURL=googleProvider.js.map","import {\r\n    AlgoliaProvider,\r\n    BingProvider,\r\n    EsriProvider,\r\n    HereProvider,\r\n    LocationIQProvider,\r\n    OpenCageProvider,\r\n    // GoogleProvider,\r\n    OpenStreetMapProvider\r\n} from 'leaflet-geosearch'\r\n\r\nimport Map4DProvider from './providers/Map4DProvider'\r\nimport GoogleProvider from './providers/GoogleProvider'\r\nimport CocCocProvider from './providers/CocCocProvider'\r\n\r\nexport default {\r\n    'algolia': AlgoliaProvider,\r\n    'bing': BingProvider,\r\n    'esri': EsriProvider,\r\n    'google': GoogleProvider,\r\n    'here': HereProvider,\r\n    'locationiq': LocationIQProvider,\r\n    'opencage': OpenCageProvider,\r\n    'openstreetmap': OpenStreetMapProvider,\r\n    'map4d': Map4DProvider,\r\n    'cococ': CocCocProvider,\r\n}\r\n\r\n"],"names":["JsonProvider","getUrl","url","params","this","options","cors","isString","getParamString","BaseJsonProvider","Map4DProvider","endpoint","query","text","parse","data","code","result","map","r","x","location","lng","y","lat","label","address","bounds","raw","CocCocProvider","suggestions","pos_accuracy","poi","gps","longitude","latitude","title","GoogleProvider","_this","arguments","api","place_type","searchUrl","getQueryType","geometry","formatted_address","viewport","southwest","northeast","algolia","AlgoliaProvider","bing","BingProvider","esri","EsriProvider","google","here","HereProvider","locationiq","LocationIQProvider","opencage","OpenCageProvider","openstreetmap","OpenStreetMapProvider","map4d","cococ"],"mappings":"icAGMA,0FACFC,OAAA,SAAOC,EAAKC,GACR,MAAkBC,KAAKC,QAAlBC,KAAAA,aAAO,KAEZ,UADAA,EAAOC,WAASD,GAAQA,IAAQA,GAAO,uCACtBJ,MAAOE,KAAKI,eAAeL,OAJzBM,gBCDrBC,kGACFC,SAAA,YAAWC,IACDT,OACCC,KAAKC,QAAQF,QAChBU,OAHGD,QAMP,YAAYX,OAAO,uCAAwCE,MAI/DW,MAAA,gBAAQC,IAAAA,KACJ,MAAiB,OAAdA,EAAKC,KAAsB,GAEvBD,EAAKE,OAAOC,IAAI,SAACC,SAAO,CAC3BC,EAAGD,EAAEE,SAASC,IACdC,EAAGJ,EAAEE,SAASG,IACdC,MAAON,EAAEO,QACTC,OAAQ,KACRC,IAAKT,SAnBWnB,GCAtB6B,kGACFlB,SAAA,gBAEQR,KACI2B,aAAa,EACbC,aAAc,MACX3B,KAAKC,QAAQF,QAChBS,QANFA,QASN,YAAYX,OAAO,yCAA0CE,MAGjEW,MAAA,gBAAOC,IAAAA,KACH,OAAKA,EAAKE,OAEHF,EAAKE,OAAOe,IAAId,IAAI,SAACC,SAAO,CAC/BC,EAAGD,EAAEc,IAAIC,UACTX,EAAGJ,EAAEc,IAAIE,SACTV,MAAON,EAAEiB,MACTT,OAAQ,KACRC,IAAKT,KAPgB,OAdJnB,GCDRqC,cACjB,sBACIC,eAASC,kBACmDlC,SAAW,OAAhEmC,IAAAA,aAAM,gBAAWC,WAAAA,aAAa,iBAF3B,MAIC,UAARD,GACCF,EAAKjC,QAAQoC,WAAaA,EAC1BH,EAAKI,kDAAoDF,MAAOC,WAEhEH,EAAKI,kDAAoDF,8CAIjE7B,SAAA,kBAAWC,IAAAA,MACDT,EAA0B,iBAAVS,UAAwBR,KAAKuC,gBAAiB/B,KAAUA,EAC9E,YAAYX,OAAOG,KAAKsC,UAAWvC,MAGvCwC,aAAA,WACI,MAA0BvC,KAAKC,QAAnBoC,IAAAA,WACZ,MAAW,YADJD,IAEe,eAAfC,EAAoC,QAChB,iBAAfA,EAAsC,WACvB,YAAfA,EAAiC,WAClB,UAAfA,EAA+B,iBAC3B,QAGT,aAGX3B,MAAA,SAAMG,GACF,MAA0Bb,KAAKC,QAG/B,OAAOY,EAAOF,KAFY,YADnByB,KAC6C,mBADxCC,WAC0D,cAAgB,WAEvDvB,IAAI,SAACC,SAAO,CACvCC,EAAGD,EAAEyB,SAASvB,SAASC,IACvBC,EAAGJ,EAAEyB,SAASvB,SAASG,IACvBC,MAAON,EAAE0B,kBACTlB,OAAQ,CACJ,CAACR,EAAEyB,SAASE,SAASC,UAAUvB,IAAKL,EAAEyB,SAASE,SAASC,UAAUzB,KAClE,CAACH,EAAEyB,SAASE,SAASE,UAAUxB,IAAKL,EAAEyB,SAASE,SAASE,UAAU1B,MAEtEM,IAAKT,SA3C2BnB,KCc7B,CACXiD,QAAWC,kBACXC,KAAQC,eACRC,KAAQC,eACRC,OAAUlB,EACVmB,KAAQC,eACRC,WAAcC,qBACdC,SAAYC,mBACZC,cAAiBC,wBACjBC,MAAStD,EACTuD,MAASpC"}